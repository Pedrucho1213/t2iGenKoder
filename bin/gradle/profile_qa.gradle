dependencies {
    testImplementation "com.h2database:h2"
}

def profileList = ['loc','dev','qa','prod']
// Profile default
def profile_default = "qa"

def profiles = "${profile_default}"
if (project.hasProperty("no-liquibase")) {
    profiles += ",no-liquibase"
}

if (project.hasProperty("api-docs")) {
    profiles += ",api-docs"
}

springBoot {
    buildInfo()
}

bootRun {
    args = []
}

// Original dependsOn: "npmInstall"
task webpack_test(type: NpmTask, dependsOn: "npm_run_inst") {
    args = ["run", "webpack:test"]
}

// Original dependsOn: "npmInstall"
task webpack(type: NpmTask, dependsOn: "npm_run_inst") {
    args = ["run", "webpack:prod"]
    environment = [APP_VERSION: project.version]
}

processResources {
    inputs.property('version', version)
    inputs.property('springProfiles', profiles)
    filesMatching("**/application.yml") {
        filter {
            it.replace("#project.version#", version)
        }
        filter {
            it.replace("#spring.profiles.active#", profiles)
        }
    }

    profileList.each { prof ->
        // if (prof != profile_default) return
        def profProp = new Properties()

        file("gradle/profile_${prof}.properties").withInputStream{
            profProp.load(it);
        }
        profProp.version = version
        profProp.profile_active = prof
        // println "Prop ${prof}: ${profProp}"

        filesMatching("**/application-${prof}.yml") {
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: profProp)
        }

        filesMatching("**/application-tls.yml") {
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: profProp)
        }
    }
}

def withFront = true

if (findProperty("withFront")) {
    withFront = findProperty("withFront")
}

println "Building with Front: ${withFront}"

test.dependsOn webpack_test
if (withFront == true) {
   processResources.dependsOn webpack
}
bootJar.dependsOn processResources
